# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - apt update && apt install -y clang python3-dev curl fish parallel
  - curl -L https://github.com/Clever/csvlint/releases/download/v0.3.0/csvlint-v0.3.0-linux-amd64.tar.gz | tar xz --strip-components 1 && mv csvlint /bin/
  - csvlint --help  # Print out csvlint help for debugging
  - python -V  # Print out python version for debugging
  - pip install --upgrade pip
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install -e .[dev,test]

test:
  script:
    - python3 -m pytest -n 16 --randomly-seed=0 --html=report.html --self-contained-html --cov-report xml:coverage.xml --cov-report term --cov-config=.coveragerc --cov=isla tests/
  coverage: '/TOTAL *\d+ *\d+ *\d+(\.\d+)?%/'
  artifacts:
    when: always
    paths:
      - report.html
      - coverage.xml

build:
  script:
    - python setup.py bdist_wheel
    # an alternative approach is to install and run:
    #- pip install dist/*
    # run the command here
  artifacts:
    paths:
      - dist/*.whl
      - dist/*.tar.gz

runPerfEval:
  script:
    - parallel --j 5 'fish -c "./run_eval_csv.fish &> perf_result_csv.txt"' 'fish -c "./run_eval_scriptsize_c.fish &> perf_result_c.txt"' 'fish -c "./run_eval_rest.fish &> perf_result_rest.txt"' 'fish -c "./run_eval_tar.fish &> perf_result_tar.txt"' 'fish -c "./run_eval_xml.fish &> perf_result_xml.txt"' &
    - tail --pid=$! -f perf_result_*.txt
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    when: always
    paths:
      - perf_result_*.txt
